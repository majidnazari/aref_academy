#import Type/type.graphql


scalar _Any
scalar _FieldSet

# a union of all types that use the @key directive
union _Entity = Course | User

type _Service {
  sdl: String
}

# extend type Query {
#   _entities(representations: [_Any!]!): [_Entity]! @field(resolver: "App\\GraphQL\\Queries\\_entities@__invoke") 
#   _service: _Service!  @field(resolver: "App\\GraphQL\\Queries\\_service@__invoke") 
# }

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE

# this is an optional directive discussed below
directive @extends on OBJECT | INTERFACE

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")


  type Query @extends  { 
     _entities(representations: [_Any!]!): [_Entity]! 
     _service: _Service!  
    #users: [User!]!  @paginate  #(type: "paginator" model: "App\\User")
    # //user(id:ID @eq):User  @guard(with: ["api"]) @find

    # azmoons: [Azmoon!]! @guard(with: ["api"]) @paginate
    # azmoon(id: ID @eq):Azmoon @guard(with: ["api"]) @find

    # test1param(name:String="abdollah"): String

    # getUser(id:ID!):User @can(ability: "view")  @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Queries\\User\\GetUser@resolveUserAttribute") 
    # getUsers(
    #         first_name: String @like(template : "%{}%") 
    #         last_name: String @like(template : "%{}%")
    #         email: String @like(template : "%{}%")      
    #         group_id: Int  
    #         branch_id: Int  @eq
    #         # group_id: Group  @belongsToMany(relation: "groups" ) 
    #         orderBy: [OrderByClause!] @orderBy
    #   ): [User]  @guard(with:["api"])  @paginate(builder: "App\\GraphQL\\Queries\\User\\GetUsers@resolveUser") 


   
    #import Queries/User/User.graphql
    #import Queries/Group/Group.graphql
    #import Queries/Teacher/Teacher.graphql
    #import Queries/Year/Year.graphql
    #import Queries/Course/Course.graphql
    #import Queries/CourseSession/CourseSession.graphql
    #import Queries/CourseStudent/CourseStudent.graphql
    #import Queries/IllegalStudent/IllegalStudent.graphql
    #import Queries/AbsencePresence/AbsencePresence.graphql
    #import Queries/Azmoon/Azmoon.graphql
    #import Queries/AzmoonResult/AzmoonResult.graphql
    #import Queries/Branch/Branch.graphql
    #import Queries/BranchClassRoom/BranchClassRoom.graphql
    #import Queries/Fault/Fault.graphql
    #import Queries/Lesson/Lesson.graphql
    #import Queries/StudentContact/StudentContact.graphql
    #import Queries/StudentFault/StudentFault.graphql
    #import Queries/StudentWarning/StudentWarning.graphql
    #import Queries/StudentWarningHistories/StudentWarningHistories.graphql
    
    
    
    # getUsers: [User!]!  @field(resolver: "App\\GraphQL\\Queries\\User\\GetUsers@resolveUserAttribute") 
    # GetUsers: [User!]!  @paginate(builder: "App\\Models\\User@resolveUser")
    # GetUsers: [User!]! @paginate(defaultCount: 10 )
    # getUsers: [User!]!  @guard(with:["api"]) @paginate(defaultCount: 10) #(builder: "App\\Models\\User@resolveUser")  
     
     gettest(token:String) : String @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Queries\\StudentContact\\GetStudentContact@resolvetestAttribute") 
     testHeader(simpleparameter:String) : String @cacheControl(maxAge: 3600, scope: PUBLIC) @guard(with:["api"]) @field(resolver: "App\\GraphQL\\Queries\\StudentContact\\GetStudentContact@resolvetestHeaderAttribute") 

    #  getTraslateFile: String @field(resolver: "App\\GraphQL\\Queries\\StudentContact\\GetStudentContact@resolveShowTranslate")


   
}



type Mutation {
    #test2:String!
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    # logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    # forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    # updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    # register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    # socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    # verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    #updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse  @can(ability: "update") @field(resolver: "App\\GraphQL\\Mutations\\User\\ResetPassword@resolve") 
    updateOtherUserPassword(input: UpdateOtherUserPassword! @spread): User  @can(ability: "update") @field(resolver: "App\\GraphQL\\Mutations\\User\\ResetOtherUserPassword@resolve") 
  

  # region teacher
    # createTeacher(input: CreateTeacherInput! @spread): Teacher! @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Mutations\\Teacher\\CreateTeacher@resolver")
    # updateTeacher(input: UpdateTeacherInput! @spread): Teacher! @guard(with:["api"])  @field(resolver: "App\\GraphQL\\Mutations\\Teacher\\UpdateTeacher@resolver")
    # deleteTeacher(id:ID!):Teacher @guard(with:["api"]) @delete
  #end region

   
    
    #import Mutations/User/User.graphql
    #import Mutations/Group/Group.graphql
    #import Mutations/Teacher/Teacher.graphql
    #import Mutations/Year/Year.graphql
    #import Mutations/Course/Course.graphql
    #import Mutations/CourseSession/CourseSession.graphql
    #import Mutations/CourseStudent/CourseStudent.graphql
    #import Mutations/IllegalStudent/IllegalStudent.graphql
    #import Mutations/AbsencePresence/AbsencePresence.graphql
    #import Mutations/Azmoon/Azmoon.graphql
    #import Mutations/AzmoonResult/AzmoonResult.graphql
    #import Mutations/Branch/Branch.graphql
    #import Mutations/BranchClassRoom/BranchClassRoom.graphql
    #import Mutations/Fault/Fault.graphql
    #import Mutations/Lesson/Lesson.graphql
    #import Mutations/StudentContact/StudentContact.graphql
    #import Mutations/StudentFault/StudentFault.graphql
    #import Mutations/StudentWarning/StudentWarning.graphql
    #import Mutations/StudentWarningHistories/StudentWarningHistories.graphql
    

}



